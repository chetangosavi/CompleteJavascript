1. What is rest parameter in javascript ?
->  JavaScript Rest Parameters is a feature introduced in ES6 that allows us to pass an indefinite
    number of arguments to a function. This feature is used to pass an unlimited number of arguments 
    to a function, and the rest parameter allows us to access the arguments as an array.

2. What are parameters in JavaScript?
->  In JavaScript, parameters are variables that you list as part of a function definition. 
    They act as placeholders for values that will be passed to the function when it is called.
__________________________________________________________________________________________________________________________________________

//Event Handling :

1. what an event listener is? 
-> An event listener is basically a function that waits for an event to occur. That event can be anything 
   like a mouse click event, submitting a form, pressing keys of a keyboard, etc.


__________________________________________________________________________________________________________________________________________

//Clouser

1. What is a closure in JavaScript?
-> A closure is a feature in JavaScript where an inner function has access to:
    - Variables defined in its own scope.
    - Variables of its outer (enclosing) function.
    - Variables in the global scope.
    
2. Why and when are closures used? ?
->  Closures are used for:
    - Data hiding (creating private variables).
    - Callback functions in asynchronous operations.
    - Function currying.
    - Maintaining state in functions.

3. How do closures help in data hiding?
-> Closures allow you to create private variables by enclosing them within a function, 
   making them inaccessible from the global scope.

   function counter() {
    let count = 0; // Private variable
    return {
        increment: () => ++count,
        decrement: () => --count,
        getCount: () => count,
       };
    }

4. What are the disadvantages of closures?
->  Memory consumption: Closures retain references to variables in their scope, which may increase memory usage if not handled properly.
    Debugging difficulty: Debugging closures can be tricky due to the retained scope.
    Overhead: Excessive use of closures in performance-critical applications may lead to slower execution.

5. Can you explain closures in event listeners?
-> Closures are often used in event listeners to maintain access to variables from their outer function.

Example:
    function attachClickEvent(buttonId) {
        let count = 0; // Closure variable
        const button = document.getElementById(buttonId);
        button.addEventListener("click", () => {
            count++;
            console.log(`Button clicked ${count} times`);
        });
    }

// Call the function for a button
attachClickEvent("myButton");
Here, the inner function (event listener) retains access to the count variable, demonstrating a closure.

6. How are closures used in currying?
-> Currying is a technique where a function returns another function, allowing arguments to be passed one at a time. 
   Closures enable this behavior.

7. What are common mistakes when using closures?
-> Unexpected variable updates: Closures retain references, not copies, of outer variables.

8. Can closures cause memory leaks?
-> Yes, if references to a closure are not cleared properly, it may lead to memory leaks.
    Example :
        function createClosure() {
            let bigObject = { data: "This is a large object" };
            return function () {
                console.log(bigObject);
            };
        }

        const closureFunction = createClosure();
// If closureFunction is not cleared, `bigObject` will remain in memory.

9. What is the relationship between closures and the scope chain?
-> Closures work by leveraging the scope chain. A closure "remembers" the variables of its parent 
   scope even after the parent function has executed.
__________________________________________________________________________________________________________________________________________

//Callback and Callback Hell

1. Callback Hell
->  Callback hell refers to the situation in JavaScript where multiple nested callbacks create complex, 
    deeply indented code, often called the “pyramid of doom.” This structure makes the code difficult to read, 
    debug, and maintain, resulting in poor code quality and scalability issues.

2. Why do callbacks sometimes lead to callback hell?
-> Callbacks can lead to callback hell when multiple asynchronous tasks are chained together, requiring nested callbacks. 
   This nesting results in complex, deeply indented code that is difficult to read and manage.


3. Can callbacks be used without causing callback hell?
-> Yes, callbacks can be used effectively without causing callback hell, especially in simple scenarios with few 
   asynchronous tasks. The key is to avoid excessive nesting by breaking down tasks or using alternatives like Promises.


4. How can callback hell be avoided when using callbacks?
-> Callback hell can be avoided by using techniques such as modularizing code, flattening the nesting by breaking down tasks, 
   or switching to alternatives like Promises or async/await, which provide more linear code structures.


5. What alternatives to callbacks help prevent callback hell?
-> Promises and async/await are popular alternatives to callbacks that help prevent callback hell. They offer more linear, 
   readable, and maintainable code by avoiding deep nesting and allowing better error handling.


6. Is async/await better than callbacks for preventing callback hell?
-> Yes, async/await is generally better than callbacks for preventing callback hell. It allows asynchronous code 
   to be written in a synchronous-like manner, making it more readable, maintainable, and easier to debug, thereby 
   avoiding the pitfalls of callback hell.

__________________________________________________________________________________________________________________________________________


Promises :

1. What is promise all JavaScript?
-> Promise. all is used when you have multiple asynchronous operations and you want to wait for all of them to complete.
   It takes an array of promises and returns a single Promise that resolves when all of the promises have resolved